type Customer {
    reviews(
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return.")
    ): ProductReviews!
}

type ProductInterface {
    average_review_rating: Float! @doc(description: "The average of all the ratings given to the product.")
    review_count: Int! @doc(description: "The total count of all the reviews given to the product.")
    reviews(
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return."),
        sort: ReviewSortInput @doc(description: "Specifies which field to sort on, and whether to return the results in ascending or descending order.")
    ): ProductReviews! @doc(description: "ProductReview returns an array containing approved product reviews")
}

type ProductReviews {
    items: [ProductReview]! @doc(description: "An array of product reviews.")
    page_info: SearchResultPageInfo! @doc(description: "Metadata for pagination rendering.")
    total_count: Int @doc(description: "The number of product reviews returned")
}

type ProductReview @doc(description: "Details of a product review") {
    review_id: Int! @doc(description: "The ID assigned to the review")
    product: ProductInterface! @doc(description: "Contains details about the reviewed product")
    title: String! @doc(description: "The review title")
    review_text: String! @doc(description: "The review text.")
    nickname: String! @doc(description: "The customer's nickname. Defaults to customer name if logged in.")
    created_at: String! @doc(description: "Date indicating when the review was created.")
    average_rating: Float! @doc(description: "The average rating for product review.")
    ratings: [ProductReviewRating!]! @doc(description: "An array of ratings by rating category. For example Quality, Price.")
}

type ProductReviewRating {
    name: String! @doc(description: "The review rating name. For example Quality, Price.")
    percent: Float! @doc(description: "The rating percent given by customer to the review")
    value: Int! @doc(description: "The rating value given by customer. Possible values by default: 1 to 5.")
}

type Query {
    productReviewRatingsMetadata(): ProductReviewRatingsMetadata! @doc(description: "Metadata required by clients to render ratings & reviews section.")
}

type ProductReviewRatingsMetadata {
    items: [ProductReviewRatingMetadata!]! @doc(description: "List of product reviews sorted based on position")
}

type ProductReviewRatingMetadata {
    id: String! @doc(description: "Base 64 encoded rating id.")
    name: String! @doc(description: "The review rating name. For example Quality, Price")
    values: [ProductReviewRatingValueMetadata!]! @doc(description: "List of product review ratings sorted based on position.")
}

type ProductReviewRatingValueMetadata {
    value_id: String! @doc(description: "Base 64 encoded rating value id.")
    value: Int!@doc(description: "The rating value. Possible values: 1, 2, 3, 4, 5")
}

type Mutation {
    createProductReview(input: CreateProductReviewInput!): CreateProductReviewOutput!
}

type CreateProductReviewOutput {
    review: ProductReview!
}

input CreateProductReviewInput {
    sku: String! @doc(description: "The SKU of the product that the review is assigned")
    nickname: String! @doc(description: "The customer's nickname. Defaults to customer name if logged in.")
    title: String! @doc(description: "The review title")
    review_text: String! @doc(description: "The review text.")
    ratings: [ProductReviewRatingInput!]! @doc(description: "Ratings details by category. e.g Price: 5, Quality: 4, etc")
}

type ProductReviewRatingInput {
    id: String! @doc(description: "Base 64 encoded rating id.")
    value_id: String! @doc(description: "Base 64 encoded rating value id.")
}

input ReviewSortInput @doc(description: "Specifies the field to use for sorting results and indicates whether the results are sorted in ascending or descending order") {
    created_at: SortEnum @doc(description: "Timestamp indicating when the product review was created")
    average_rating: SortEnum @doc(description: "Average rating of the review.")
}
