type Query {
    # Implementation Note: Negotiable Quotes belong to the Query type,
    # rather than the Customer type, because managers
    # in a company can see quotes belonging to their
    # employees. If `Customer.negotiable_quotes` is desirable for buyer's
    # that aren't managers, we can always add that on
    negotiableQuote(uid: ID!): NegotiableQuote @doc(description: "Get a buyer's negotiable quote by ID")
    negotiableQuotes(
        filter: NegotiableQuoteFilterInput,
        pageSize: Int = 20,
        currentPage: Int = 1
        sort: NegotiableQuoteSortInput
    ): NegotiableQuotesOutput @doc(description: "A (optionally filtered) list of negotiable quotes viewable by the logged-in customer")
}

type NegotiableQuotesOutput {
    items: [NegotiableQuote!]!
    page_info: SearchResultPageInfo!
    total_count: Int!
    sort_fields: SortFields
}

# Coverage missing:
#   - Negotiable Quote Checkout Process (once seller has approved the quote)
#   - File Upload (depends on reaching consensus on file upload design - design is in internal wiki)
type Mutation {
    # https://docs.magento.com/user-guide/sales/quote-request.html
    requestNegotiableQuote(
        input: RequestNegotiableQuoteInput!
    ): RequestNegotiableQuoteOutput @doc(description: "Request a new negotiable quote for a buyer")

    # https://docs.magento.com/user-guide/customers/account-dashboard-quotes-negotiate.html#change-the-quantity
    updateNegotiableQuoteQuantities(
        input: UpdateNegotiableQuoteQuantitiesInput!
    ): UpdateNegotiableQuoteItemsQuantityOutput @doc(description: "Change the quantity of 1 or more items already in a negotiable quote")

    # Covers "Delete Line Item" section of https://docs.magento.com/user-guide/customers/account-dashboard-quotes-negotiate.html#tabbed-sections
    removeNegotiableQuoteItems(
        input: RemoveNegotiableQuoteItemsInput!
    ): RemoveNegotiableQuoteItemsOutput @doc(description: "Remove 1 or more products from a Negotiable Quote")

    # Covers first half of https://docs.magento.com/user-guide/customers/account-dashboard-quotes.html#cancel-a-quote-request
    closeNegotiableQuotes(
        input: CloseNegotiableQuotesInput!
    ): CloseNegotiableQuotesOutput @doc(description: "Mark a negotiable quote as closed, leaving it visible in the storefront")

    # Covers second half of https://docs.magento.com/user-guide/customers/account-dashboard-quotes.html#cancel-a-quote-request
    deleteNegotiableQuotes(
        input: DeleteNegotiableQuotesInput!
    ): DeleteNegotiableQuotesOutput @doc(description: "Delete a negotiable quote, removing it from the display in the storefront")

    # Covers "Select Existing Address" in https://docs.magento.com/user-guide/customers/account-dashboard-quotes-negotiate.html#shipping-information
    # "New Address" flow is covered by Mutation.createCustomerAddress
    setNegotiableQuoteShippingAddress(
        input: SetNegotiableQuoteShippingAddressInput!
    ): SetNegotiableQuoteShippingAddressOutput @doc(description: "Assign one of buyers' existing addresses to a negotiable quote")

    sendNegotiableQuoteForReview(
        input: SendNegotiableQuoteForReviewInput!
    ) : SendNegotiableQuoteForReviewOutput @doc(description: "Send the negotiable quote for review to the seller")

    setNegotiableQuoteBillingAddress(
        input: SetNegotiableQuoteBillingAddressInput!
    ): SetNegotiableQuoteBillingAddressOutput @doc(description: "Assign a billing address to a negotiable quote")

    # Pending decision on design of file upload (design doc still pending decisions)
    # addNegotiableQuoteFiles(
    #     input: AddNegotiableQuoteFilesInput!
    # ): AddNegotiableQuoteFilesInput
}

type AddNegotiableQuoteItemsOutput {
    quote: NegotiableQuote
    # TODO: We'll probably want to add the same
    #       errors that can happen when adding an item
    #       to a normal cart object, but will also have
    #       some additional errors (i.e can't add an item
    #       when a negotiable quote is in some statuses)
}

input SetNegotiableQuoteShippingAddressInput {
    quote_uid: ID! @doc(description: "ID obtained from NegotiableQuote type")
    customer_address_id: Int! @doc(
        description: "ID obtained from the CustomerAddress type. A new address can be added using Mutation.createCustomerAddress"
    )
}

input SetNegotiableQuoteBillingAddressInput {
    quote_uid: ID! @doc(description: "ID obtained from NegotiableQuote type")
    billing_address: NegotiableQuoteBillingAddressInput!
}

input NegotiableQuoteBillingAddressInput {
    customer_address_id: Int
    address: NegotiableQuoteAddressInput
    use_for_shipping: Boolean @doc(description: "Indicates whether to additionally set the shipping address based on the provided billing address")
    same_as_shipping: Boolean @doc(description: "Indicates whether to set the billing address based on the existing shipping address on the cart")
}

input NegotiableQuoteAddressInput {
    firstname: String!
    lastname: String!
    company: String
    street: [String!]!
    city: String!
    region: String
    region_id: Int
    postcode: String
    country_code: String!
    telephone: String
    save_in_address_book: Boolean
}

input SendNegotiableQuoteForReviewInput {
    quote_uid: ID! @doc(description: "ID obtained from NegotiableQuote type")
    comment: NegotiableQuoteCommentInput
}

type SendNegotiableQuoteForReviewOutput {
    quote: NegotiableQuote
}

type SetNegotiableQuoteShippingAddressOutput {
    quote: NegotiableQuote
}

input AddNegotiableQuoteItemsInput {
    quote_uid: ID! @doc(description: "UID from a negotiable quote object")
    # Implementation Note: This *should* be compatible with the new, single
    # add to cart mutation. https://github.com/magento/architecture/blob/master/design-documents/graph-ql/coverage/AddProductsToCart.graphqls
    cart_items: [CartItemInput!]!
}

input DeleteNegotiableQuotesInput {
    quote_uids: [ID!]! @doc(description: "A List of UIDs obtained from negotiable quote types")
}

type DeleteNegotiableQuotesOutput {
    # Implementation Note: We don't make the deleted quotes accessible
    # because "deleted" means they're hidden from the storefront UI. They will
    # still be visible (and labeled as deleted) for a Seller in the admin
    negotiable_quotes(
        filter: NegotiableQuoteFilterInput,
        pageSize: Int = 20,
        currentPage: Int = 1
        sort: NegotiableQuoteSortInput
    ): NegotiableQuotesOutput @doc(description: "List of negotiable quotes available to customer")
}

input CloseNegotiableQuotesInput {
    quote_uids: [ID!]! @doc(description: "A List of IDs from negotiable quote objects")
}

type CloseNegotiableQuotesOutput {
    closed_quotes(
        filter: NegotiableQuoteFilterInput,
        pageSize: Int = 20,
        currentPage: Int = 1
        sort: NegotiableQuoteSortInput
    ): NegotiableQuotesOutput @doc(description: "Quotes that were just closed")
    #optionally display all negotiable quotes
    negotiable_quotes(
        filter: NegotiableQuoteFilterInput,
        pageSize: Int = 20,
        currentPage: Int = 1
        sort: NegotiableQuoteSortInput
    ): NegotiableQuotesOutput @doc(description: "A (optionally filtered) list of negotiable quotes viewable by the logged-in customer")
}

input RemoveNegotiableQuoteItemsInput {
    quote_uid: ID!
    quote_item_uids: [ID!]! @doc(description:"Cart Item uids")
}

input UpdateNegotiableQuoteQuantitiesInput {
    quote_uid: ID!
    items: [NegotiableQuoteItemQuantityInput!]!
}

input NegotiableQuoteItemQuantityInput {
    quote_item_uid: ID! @doc(description:"Cart Item uid")
    quantity: Float!
}

input RequestNegotiableQuoteInput {
    quote_uid: ID! @doc(description: "Cart uid")
    quote_name: String!
    comment: NegotiableQuoteCommentInput!
    # files (attachments) to be added at a later date when file upload design has been finalized
}

input NegotiableQuoteCommentInput {
    comment: String!
    # files (attachments) to be added at a later date when file upload design has been finalized
}

type NegotiableQuoteComment {
    uid: ID!
    created_at: String!
    author: NegotiableQuoteUser!
    creator_type: NegotiableQuoteCommentCreatorType!
    text: String! @doc(description: "A simple (non-html) comment submitted by a seller or buyer")
}

enum NegotiableQuoteCommentCreatorType {
    BUYER
    SELLER
}

type NegotiableQuote {
    uid: ID!
    name: String!
    items: [CartItemInterface!]
    # Attachment Support is dependent on headless File Upload design
    # attachments: [AttachmentContent]
    comments: [NegotiableQuoteComment!]
    history: [NegotiableQuoteHistoryEntry!]
    billing_address: BillingCartAddress
    prices: NegotiableQuotePrices
    buyer: NegotiableQuoteUser!
    created_at: String @doc(description: "Timestamp indicating when the negotiable quote was created.")
    updated_at: String @doc(description: "Timestamp indicating when the negotiable quote was updated.")
    status: NegotiableQuoteStatus!
}

# Implementation Note: Using the values from the "Buyer Status" column of the state mapping table in devdocs.
# These states are identical between storefront/admin, but we name them differently for buyers.
# https://devdocs.magento.com/guides/v2.4/b2b/negotiable-quote.html#quote-statuses
enum NegotiableQuoteStatus {
    SUBMITTED
    PENDING
    UPDATED
    OPEN
    ORDERED
    CLOSED
    DECLINED
    EXPIRED
}

input NegotiableQuoteFilterInput {
    quote_uid: FilterEqualTypeInput @doc(description: "Filter by quote UID(s)")
    name: FilterMatchTypeInput @doc(description: "Filter by negotiable quote name")
}

input NegotiableQuoteSortInput {
    sort_field: NegotiableQuoteSortableField!
    sort_direction: SortEnum!
}

enum NegotiableQuoteSortableField {
    QUOTE_NAME
    CREATED_AT
    UPDATED_AT
}

type NegotiableQuoteHistoryEntry {
    uid: ID!
    author: NegotiableQuoteUser!
    change_type: NegotiableQuoteHistoryEntryChangeType!
    created_at: String
    changes: NegotiableQuoteHistoryChanges
}

type NegotiableQuotePrices implements QuotePricesInterface {
    initial_grand_total: Money!
}

type NegotiableQuoteItemPrices implements QuoteItemPricesInterface {
    initial_price: Money!
    initial_row_total: Money!
    initial_row_total_including_tax: Money!
}

# Note: Most of these HistoryChange types were built based on looking through UI code in Luma, because we don't have existing API
#       support for the Negotiable Quote history log feature. If we find these types aren't ideal during implementation,
#       let's iterate rather than stay glued to them.
#
#       Resources
#       Diffing class: https://github.com/magento/magento2b2b/blob/5547298c3dde48234ce74ed8ae9000fce3fe01b1/app/code/Magento/NegotiableQuote/Model/History/DiffProcessor.php
#       Block for UI:  https://github.com/magento/magento2b2b/blob/0e791b5f7cd604ee6ee40b7225807c01b7f70cf2/app/code/Magento/NegotiableQuote/Block/Quote/History.php
#       Usage in UI:   https://github.com/magento/magento2b2b/blob/0e791b5f7cd604ee6ee40b7225807c01b7f70cf2/app/code/Magento/NegotiableQuote/view/base/templates/quote/history.phtml
#
#       There is currently no support for the `Custom Log` feature supported by the Luma UI, but we can add it on
#       https://github.com/magento/magento2b2b/blob/0e791b5f7cd604ee6ee40b7225807c01b7f70cf2/app/code/Magento/NegotiableQuote/view/base/templates/quote/history.phtml#L316-L363
#
# Implementation Notes:
#       - Fields in NegotiableQuoteHistoryChanges should be null when no change is present
#       - An Object Type is used, rather than a list, because the UI likely wants
#         to render some of these differently from others in the UI, and a List would require us to guess
#         at the desired ordering for the client. This is also more extensible with less risk of breaking
#         changes (compared to extending a union or shared interface)
type NegotiableQuoteHistoryChanges {
    statuses: NegotiableQuoteHistoryStatusesChange
    comment_added: NegotiableQuoteHistoryCommentChange
    total: NegotiableQuoteHistoryTotalChange
    expiration: NegotiableQuoteHistoryExpirationChange
    products_changed: NegotiableQuoteHistoryProductsChange
    products_removed: NegotiableQuoteHistoryProductsRemovedChange
    products_added: NegotiableQuoteHistoryProductsAddedChange
    custom_changes: NegotiableQuoteCustomLogChange
}

# Usage in Luma: https://github.com/magento/magento2b2b/blob/0e791b5f7cd604ee6ee40b7225807c01b7f70cf2/app/code/Magento/NegotiableQuote/view/base/templates/quote/history.phtml#L40-L73
type NegotiableQuoteHistoryStatusChange {
    old_status: NegotiableQuoteStatus @doc(description: "Will be null for the first history entry on a negotiable quote")
    new_status: NegotiableQuoteStatus! @doc(description: "Negotiable quote history new status.")
}

# Usage in Luma: https://github.com/magento/magento2b2b/blob/0e791b5f7cd604ee6ee40b7225807c01b7f70cf2/app/code/Magento/NegotiableQuote/view/base/templates/quote/history.phtml#L48
type NegotiableQuoteHistoryStatusesChange {
    changes: [NegotiableQuoteHistoryStatusChange!]!
}

# Usage in Luma: https://github.com/magento/magento2b2b/blob/0e791b5f7cd604ee6ee40b7225807c01b7f70cf2/app/code/Magento/NegotiableQuote/view/base/templates/quote/history.phtml#L239-L258
type NegotiableQuoteHistoryCommentChange {
    # Implementation Note: Comments are append-only and don't support editing, which explains
    #                       the absence of `old_*` and `new_*` fields
    comment: String! @doc(description: "A simple (non-html) comment submitted by a seller or buyer")
    # Need to add attachment support when file upload has been designed/implemented
}

# Usage in Luma: https://github.com/magento/magento2b2b/blob/0e791b5f7cd604ee6ee40b7225807c01b7f70cf2/app/code/Magento/NegotiableQuote/view/base/templates/quote/history.phtml#L259-L294
type NegotiableQuoteHistoryTotalChange {
    old_price: Money
    new_price: Money
}

# Usage in Luma: https://github.com/magento/magento2b2b/blob/0e791b5f7cd604ee6ee40b7225807c01b7f70cf2/app/code/Magento/NegotiableQuote/view/base/templates/quote/history.phtml#L74-L103
type NegotiableQuoteHistoryExpirationChange {
    old_expiration: String @doc(description: "Old quote expiration. Will be 'null' if not previously set")
    new_expiration: String!
}

# Usage in Luma: https://github.com/magento/magento2b2b/blob/0e791b5f7cd604ee6ee40b7225807c01b7f70cf2/app/code/Magento/NegotiableQuote/view/base/templates/quote/history.phtml#L104-L127
type NegotiableQuoteHistoryProductsChange {
    # TODO: List of changes for both product quantities and selected options
    # TODO: needs to model qty_changed and options_changed
}

# Usage in Luma: https://github.com/magento/magento2b2b/blob/0e791b5f7cd604ee6ee40b7225807c01b7f70cf2/app/code/Magento/NegotiableQuote/view/base/templates/quote/history.phtml#L132-L146
type NegotiableQuoteHistoryProductsRemovedChange {
    # Open Question: Should `removed_from_catalog` ID type represent the SKU or the product id?
    removed_from_catalog_product_uids: [ID!] @doc(description: "List of product UIDs removed from seller's catalog")
    removed_from_quote_products: [ProductInterface!] @doc(description: "List of products removed by a buyer or seller")
}

# Usage in Luma: https://github.com/magento/magento2b2b/blob/0e791b5f7cd604ee6ee40b7225807c01b7f70cf2/app/code/Magento/NegotiableQuote/view/base/templates/quote/history.phtml#L148-L169
type NegotiableQuoteHistoryProductsAddedChange {
    # TODO: List of products added and their respective options.
}

# Usage in Luma: https://github.com/magento/magento2b2b/blob/0e791b5f7cd604ee6ee40b7225807c01b7f70cf2/app/code/Magento/NegotiableQuote/view/base/templates/quote/history.phtml#L172-L197
type NegotiableQuoteHistoryAddressChange {
    # TODO
}
# Usage in Luma: https://github.com/magento/magento2b2b/blob/0e791b5f7cd604ee6ee40b7225807c01b7f70cf2/app/code/Magento/NegotiableQuote/view/base/templates/quote/history.phtml#L316-L363
type NegotiableQuoteCustomLogChange @doc(description: "Custom log entries added by 3rd party extensions") {
    title: String!
    old_value: String
    new_value: String!
}

enum NegotiableQuoteHistoryEntryChangeType {
    CREATED
    UPDATED
    CLOSED
    UPDATED_BY_SYSTEM
}

type RequestNegotiableQuoteOutput {
    quote: NegotiableQuote
}

type RemoveNegotiableQuoteItemsOutput {
    quote: NegotiableQuote
}

type UpdateNegotiableQuoteItemsQuantityOutput {
    quote: NegotiableQuote
}

# Implementation Note: We don't want to expose the `Customer` object of the Seller to the client, and we don't
# have much of a permissions model in the storefront to limit access by field. We're using a limited view
# instead, excluding the ID because a Seller's ID shouldn't be exposed to the client.
type NegotiableQuoteUser @doc(description: "A limited view of a Buyer or Seller in the negotiable quote process") {
    firstname: String!
    lastname: String!
}

type StoreConfig {
    is_negotiable_quote_active: Boolean @doc(description: "Indicates if negotiable quote functionality is enabled.")
}

type SetNegotiableQuoteBillingAddressOutput {
    quote: NegotiableQuote
}
