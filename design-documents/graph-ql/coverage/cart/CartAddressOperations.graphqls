type Mutation {
    setShippingAddressesOnCart(input: SetShippingAddressesOnCartInput): SetShippingAddressesOnCartOutput
    setBillingAddressOnCart(input: SetBillingAddressOnCartInput): SetBillingAddressOnCartOutput
    setShippingMethodsOnCart(input: SetShippingMethodsOnCartInput): SetShippingMethodsOnCartOutput
}

input SetShippingMethodsOnCartInput {
    cart_id: String!
    shipping_methods: [ShippingMethodInput!]!
}

input ShippingMethodInput {
    carrier_code: String!
    method_code: String!
}

input SetBillingAddressOnCartInput {
    cart_id: String!
    billing_address: BillingAddressInput!
}

input BillingAddressInput {
    customer_address_id: Int
    address: CartAddressInput
    use_for_shipping: Boolean @doc(description: "Indicates whether to additionally set the shipping address based on the provided billing address")
    same_as_shipping: Boolean @doc(description: "Indicates whether to set the billing address based on the existing shipping address on the cart")
}

input SetShippingAddressesOnCartInput {
    cart_id: String!
    shipping_addresses: [ShippingAddressInput!]!
}

input ShippingAddressInput {
    customer_address_id: Int # If provided then will be used address from address book
    address: CartAddressInput
    customer_notes: String
    pickup_location_code: String
}

input CartAddressInput {
    prefix: String  @doc(description: "An honorific, such as Dr., Mr., or Mrs. See StoreConfig.address_prefix and StoreConfig.address_prefix_options")
    firstname: String!
    middlename: String @doc(description: "Middlename of a person. See StoreConfig.address_middlename")
    lastname: String!
    suffix: String  @doc(description: "A value such as Sr., Jr., or III. See StoreConfig.address_suffix and StoreConfig.address_suffix_options")
    gender: GenderEnum @doc(description: "Please check StoreConfig.address_gender if field is required")
    company: String  @doc(description: "Please check StoreConfig.address_company if field is required")
    street: [String!]!
    city: String!
    region: String @doc(description: "See Country type for field requirements")
    postcode: String @doc(description: "See Country type for field requirements")
    country_code: String!
    date_of_birth: String @doc(description: "Please check StoreConfig.address_date_of_birth if field is required"),
    telephone: String @doc(description: "Please check StoreConfig.address_telephone if field is required"),
    fax: String @doc(description: "Please check StoreConfig.address_fax if field is required"),
    vat_id: String @doc(description: "Please check StoreConfig.address_taxvat if field is required"),
    save_in_address_book: Boolean!
}


type SetShippingAddressesOnCartOutput {
    cart: Cart!
}

type SetShippingMethodsOnCartOutput {
    cart: Cart!
}

type SetBillingAddressOnCartOutput {
    cart: Cart!
}

type Cart {
    shipping_addresses: [ShippingCartAddress]!
    billing_address: BillingCartAddress!
}

interface CartAddressInterface {
    prefix: String @doc(description: "An honorific, such as Dr., Mr., or Mrs.")
    firstname: String!
    middlename: String
    lastname: String!
    suffix: String @doc(description: "A value such as Sr., Jr., or III.")
    gender: GenderEnum
    company: String
    street: [String]
    city: String!
    region: CartAddressRegion @deprecated(reason: "Deprecated use `region_v2`")
    region_v2: Region
    postcode: String
    country: CartAddressCountry @deprecated(reason: "Deprecated use `country_v2`")
    country_v2: Country
    date_of_birth: String
    telephone: String
    fax: String
    vat_id: String
}

type ShippingCartAddress implements CartAddressInterface {
    available_shipping_methods: [AvailableShippingMethod]
    selected_shipping_method: SelectedShippingMethod
    items_weight: Float
    cart_items: [CartItemQuantity]
    pickup_location_code: String
    customer_notes: String
}

type BillingCartAddress implements CartAddressInterface {
}

type CartItemQuantity {
    cart_item_id: String!
    quantity: Float!
}

type CartAddressCountry {
    code: String
    label: String
}

type CartAddressRegion {
    code: String
    label: String
}

type SelectedShippingMethod {
    carrier_code: String
    method_code: String
    carrier_title: String
    method_title: String
    amount: Money
}

type AvailableShippingMethod {
    carrier_code: String!
    carrier_title: String!
    method_code: String
    method_title: String
    error_message: String
    amount: Money!
    price_excl_tax: Money!
    price_incl_tax: Money!
    available: Boolean!
}
