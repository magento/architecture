type Mutation {
    setShippingAddressesOnCart(input: SetShippingAddressesOnCartInput): SetShippingAddressesOnCartOutput
    setBillingAddressOnCart(input: SetBillingAddressOnCartInput): SetBillingAddressOnCartOutput
    setShippingMethodsOnCart(input: SetShippingMethodsOnCartInput): SetShippingMethodsOnCartOutput
}

input SetShippingMethodsOnCartInput {
    cart_id: String!
    shipping_methods: [ShippingMethodInput!]!
}

input ShippingMethodInput {
    carrier_code: String!
    method_code: String!
}

input SetBillingAddressOnCartInput {
    cart_id: String!
    billing_address: BillingAddressInput!
}

input BillingAddressInput {
    customer_address_id: Int
    address: CartAddressInput
    use_for_shipping: Boolean @doc(description: "Indicates whether to additionally set the shipping address based on the provided billing address")
    same_as_shipping: Boolean @doc(description: "Indicates whether to set the billing address based on the existing shipping address on the cart")
}

input SetShippingAddressesOnCartInput {
    cart_id: String!
    shipping_addresses: [ShippingAddressInput!]!
}

input ShippingAddressInput {
    customer_address_id: Int # If provided then will be used address from address book
    address: CartAddressInput
    customer_notes: String
    pickup_location_code: String
}

input CartAddressInput {
    firstname: String!
    lastname: String!
    company: String
    street: [String!]!
    city: String!
    region: String
    postcode: String
    country_code: String!
    telephone: String!
    save_in_address_book: Boolean!
}

type SetShippingAddressesOnCartOutput {
    cart: Cart!
}

type SetShippingMethodsOnCartOutput {
    cart: Cart!
}

type SetBillingAddressOnCartOutput {
    cart: Cart!
}

type Cart {
    shipping_addresses: [ShippingCartAddress]!
    billing_address: BillingCartAddress!
}

interface CartAddressInterface {
    firstname: String
    lastname: String
    company: String
    street: [String]
    city: String
    region: CartAddressRegion
    postcode: String
    country: CartAddressCountry
    telephone: String
}

type ShippingCartAddress implements CartAddressInterface {
    available_shipping_methods: [AvailableShippingMethod]
    selected_shipping_method: SelectedShippingMethod
    items_weight: Float
    cart_items: [CartItemQuantity]
    pickup_location_code: String
    customer_notes: String
}

type BillingCartAddress implements CartAddressInterface {
}

type CartItemQuantity {
    cart_item_id: String!
    quantity: Float!
}

type CartAddressCountry {
    code: String
    label: String
}

type CartAddressRegion {
    code: String
    label: String
}

type SelectedShippingMethod {
    carrier_code: String
    method_code: String
    carrier_title: String
    method_title: String
    amount: Money
}

type AvailableShippingMethod {
    carrier_code: String!
    carrier_title: String!
    method_code: String
    method_title: String
    error_message: String
    amount: Money!
    price_excl_tax: Money!
    price_incl_tax: Money!
    available: Boolean!
}
